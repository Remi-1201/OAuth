<p id="notice"><%= notice %></p>
<tr><td><%= @blog.title %></td></tr><br>
<tr><td><select id="voice-select"></select></td></tr><br>
<tr><td><textarea id="text"><%= @blog.content %></textarea></tr><br>
<tr><td><button id="speak-btn">speak</button></td></tr><br>
<script>
  const text        = document.querySelector('#text')
  const voiceSelect = document.querySelector('#voice-select')
  const speakBtn    = document.querySelector('#speak-btn')

  // select„Çø„Ç∞„ÅÆ‰∏≠Ë∫´„ÇíÂ£∞„ÅÆÂêçÂâç„ÅåÂÖ•„Å£„Åüoption„Çø„Ç∞„ÅßÂüã„ÇÅ„Çã
  function appendVoices() {
    // ‚ë†„ÄÄ‰Ωø„Åà„ÇãÂ£∞„ÅÆÈÖçÂàó„ÇíÂèñÂæó
    // ÈÖçÂàó„ÅÆ‰∏≠Ë∫´„ÅØ SpeechSynthesisVoice „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
    const voices = speechSynthesis.getVoices()
    voiceSelect.innerHTML = ''
    voices.forEach(voice => { //„ÄÄ„Ç¢„É≠„ÉºÈñ¢Êï∞ (ES6)
      // Êó•Êú¨Ë™û„Å®Ëã±Ë™û‰ª•Â§ñ„ÅÆÂ£∞„ÅØÈÅ∏ÊäûËÇ¢„Å´ËøΩÂä†„Åó„Å™„ÅÑ„ÄÇ
      if(!voice.lang.match('ja|en-US')) return
      const option = document.createElement('option')
      option.value = voice.name
      option.text  = `${voice.name} (${voice.lang})` //„ÄÄ„ÉÜ„É≥„Éó„É¨„Éº„Éà„É™„ÉÜ„É©„É´ (ES6)
      option.setAttribute('selected', voice.default)
      voiceSelect.appendChild(option)
    });
  }

  appendVoices()
  // ‚ë° ‰Ωø„Åà„ÇãÂ£∞„ÅåËøΩÂä†„Åï„Çå„Åü„Å®„Åç„Å´ÁùÄÁÅ´„Åô„Çã„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„ÄÇ
  // Chrome „ÅØÈùûÂêåÊúü„Å´(‰∏ÄÂÄã„Åö„Å§)Â£∞„ÇíË™≠„ÅøËæº„ÇÄ„Åü„ÇÅÂøÖË¶Å„ÄÇ
  speechSynthesis.onvoiceschanged = e => {
    appendVoices()
  }

  speakBtn.addEventListener('click', function() {
    // Áô∫Ë®Ä„Çí‰ΩúÊàê
    const uttr = new SpeechSynthesisUtterance(text.value)
    // ‚ë¢ ÈÅ∏Êäû„Åï„Çå„ÅüÂ£∞„ÇíÊåáÂÆö
    uttr.voice = speechSynthesis
      .getVoices()
      .filter(voice => voice.name === voiceSelect.value)[0]
    // Áô∫Ë®Ä„ÇíÂÜçÁîü (Áô∫Ë®Ä„Ç≠„É•„ÉºÁô∫Ë®Ä„Å´ËøΩÂä†)
    speechSynthesis.speak(uttr)
  })
</script></tr>

<tr>
<div class="controls">
        <button type="button" id="mic">Get Microphone</button>
        <button type="button" id="record" hidden>Record</button>
      </div>
      <ul id="recordings"></ul>
    </main>
    <footer>
      <p>
        Built with üé§ by <a href="https://twitter.com/philnash">philnash</a>
      </p>
    </footer>
    <script>
      window.addEventListener('DOMContentLoaded', () => {
        const getMic = document.getElementById('mic');
        const recordButton = document.getElementById('record');
        const list = document.getElementById('recordings');
        if ('MediaRecorder' in window) {
          getMic.addEventListener('click', async () => {
            getMic.setAttribute('hidden', 'hidden');
            try {
              const stream = await navigator.mediaDevices.getUserMedia({
                audio: true,
                video: false
              });
              const mimeType = 'audio/webm';
              let chunks = [];
              const recorder = new MediaRecorder(stream, { type: mimeType });
              recorder.addEventListener('dataavailable', event => {
                if (typeof event.data === 'undefined') return;
                if (event.data.size === 0) return;
                chunks.push(event.data);
              });
              recorder.addEventListener('stop', () => {
                const recording = new Blob(chunks, {
                  type: mimeType
                });
                renderRecording(recording, list);
                chunks = [];
              });
              recordButton.removeAttribute('hidden');
              recordButton.addEventListener('click', () => {
                if (recorder.state === 'inactive') {
                  recorder.start();
                  recordButton.innerText = 'Stop';
                } else {
                  recorder.stop();
                  recordButton.innerText = 'Record';
                }
              });
            } catch {
              renderError(
                'You denied access to the microphone so this demo will not work.'
              );
            }
          });
        } else {
          renderError(
            "Sorry, your browser doesn't support the MediaRecorder API, so this demo will not work."
          );
        }
      });

      function renderError(message) {
        const main = document.querySelector('main');
        main.innerHTML = `<div class="error"><p>${message}</p></div>`;
      }

      function renderRecording(blob, list) {
        const blobUrl = URL.createObjectURL(blob);
        const li = document.createElement('li');
        const audio = document.createElement('audio');
        const anchor = document.createElement('a');
        anchor.setAttribute('href', blobUrl);
        const now = new Date();
        anchor.setAttribute(
          'download',
          `recording-${now.getFullYear()}-${(now.getMonth() + 1)
            .toString()
            .padStart(2, '0')}-${now
            .getDay()
            .toString()
            .padStart(2, '0')}--${now
            .getHours()
            .toString()
            .padStart(2, '0')}-${now
            .getMinutes()
            .toString()
            .padStart(2, '0')}-${now
            .getSeconds()
            .toString()
            .padStart(2, '0')}.webm`
        );
        anchor.innerText = 'Download';
        audio.setAttribute('src', blobUrl);
        audio.setAttribute('controls', 'controls');
        li.appendChild(audio);
        li.appendChild(anchor);
        list.appendChild(li);
      }
    </script></tr>

<p>„Ç≥„É°„É≥„Éà‰∏ÄË¶ßÔºà„Åì„Åì„Åã„Çâ‰∏ã„ÅÆÂÜÖÂÆπ„ÅåÈáçË¶ÅÔºâ</p>

  <!-- „Åì„ÅÆcomments_area„Å®„ÅÑ„ÅÜHTML„ÅÆid„ÇíÂèñÂæó„Åó„Å¶„ÄÅ„Åù„ÅÆdiv„ÅÆÈÉ®ÂàÜ„Å†„Åë„ÇíÊõ¥Êñ∞„Åô„Çã -->
<div id="comments_area">
  <!-- ÊäïÁ®ø„Åï„Çå„Åü„Ç≥„É°„É≥„Éà‰∏ÄË¶ß„Çí„Éñ„É≠„Ç∞„ÅÆË©≥Á¥∞„Éö„Éº„Ç∏„Å´Ë°®Á§∫„Åô„Çã„Åü„ÇÅ„ÅÆrender -->
  <%= render partial: 'comments/index', locals: { comments: @comments, blog: @blog } %>
</div>
<!-- „Ç≥„É°„É≥„ÉàÂÖ•ÂäõÊ¨Ñ„Çí„Éñ„É≠„Ç∞„ÅÆË©≥Á¥∞„Éö„Éº„Ç∏„Å´Ë°®Á§∫„Åô„Çã„Åü„ÇÅ„ÅÆrender -->
<%= render partial: 'comments/form', locals: { comment: @comment, blog: @blog } %>

<%= link_to 'Edit', edit_blog_path(@blog) %> |
<%= link_to 'Back', blogs_path %>

